generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model announcements {
  id                   String                 @id
  notificationId       String                 @unique
  targetUserTypes      String[]
  priority             NotificationPriority   @default(NORMAL)
  expiresAt            DateTime?
  createdBy            String
  users                users                  @relation(fields: [createdBy], references: [id])
  notifications        notifications          @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notification_batches notification_batches[]
}

model applications {
  id                String              @id
  jobId             String
  veterinarianId    String
  coverLetter       String?
  status            ApplicationStatus   @default(PENDING)
  appliedAt         DateTime            @default(now())
  reviewedAt        DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  users             users               @relation(fields: [veterinarianId], references: [id])
  job_notifications job_notifications[]

  @@unique([jobId, veterinarianId])
  @@index([jobId], map: "idx_applications_job_id")
  @@index([status], map: "idx_applications_status")
  @@index([veterinarianId], map: "idx_applications_veterinarian_id")
}

model comment_notifications {
  id              String        @id
  notificationId  String        @unique
  postType        String
  postId          String
  commentId       String
  parentCommentId String?
  notifications   notifications @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@index([postType, postId])
}

model comment_replies {
  id               String           @id
  commentId        String
  userId           String
  content          String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  deletedAt        DateTime?
  lecture_comments lecture_comments @relation(fields: [commentId], references: [id])
  users            users            @relation(fields: [userId], references: [id])
}

model contact_inquiries {
  id                                          String   @id
  sender_id                                   String
  recipient_id                                String
  job_id                                      String?
  resume_id                                   String?
  subject                                     String
  message                                     String
  type                                        String   @default("general")
  is_read                                     Boolean  @default(false)
  created_at                                  DateTime @default(now())
  updated_at                                  DateTime
  jobs                                        jobs?    @relation(fields: [job_id], references: [id])
  users_contact_inquiries_recipient_idTousers users    @relation("contact_inquiries_recipient_idTousers", fields: [recipient_id], references: [id], onDelete: Cascade)
  resumes                                     resumes? @relation(fields: [resume_id], references: [id])
  users_contact_inquiries_sender_idTousers    users    @relation("contact_inquiries_sender_idTousers", fields: [sender_id], references: [id], onDelete: Cascade)

  @@index([created_at])
  @@index([is_read])
  @@index([job_id])
  @@index([recipient_id])
  @@index([resume_id])
  @@index([sender_id])
}

model detailed_hospital_profiles {
  id                       String                     @id
  userId                   String                     @unique
  hospitalName             String
  businessNumber           String
  address                  String
  phone                    String
  website                  String?
  description              String?
  businessLicense          String?
  hospitalLogo             String?
  establishedDate          String?
  detailAddress            String?
  email                    String?
  treatmentAnimals         String[]
  treatmentFields          String[]
  operatingHours           Json?
  emergencyService         Boolean                    @default(false)
  parkingAvailable         Boolean                    @default(false)
  publicTransportInfo      String?
  totalBeds                Int?
  surgeryRooms             Int?
  xrayRoom                 Boolean                    @default(false)
  ctScan                   Boolean                    @default(false)
  ultrasound               Boolean                    @default(false)
  grooming                 Boolean                    @default(false)
  boarding                 Boolean                    @default(false)
  petTaxi                  Boolean                    @default(false)
  certifications           String[]
  awards                   String[]
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime
  deletedAt                DateTime?
  users                    users                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  hospital_equipments      hospital_equipments[]
  hospital_facility_images hospital_facility_images[]
  hospital_staff           hospital_staff[]
}

model detailed_resumes {
  id                          String                        @id
  userId                      String                        @unique
  photo                       String?
  name                        String
  birthDate                   String?
  introduction                String?
  phone                       String?
  email                       String?
  phonePublic                 Boolean                       @default(false)
  emailPublic                 Boolean                       @default(false)
  position                    String?
  specialties                 String[]
  preferredRegions            String[]
  expectedSalary              String?
  workTypes                   String[]
  startDate                   String?
  preferredWeekdays           String[]
  weekdaysNegotiable          Boolean                       @default(false)
  workStartTime               String?
  workEndTime                 String?
  workTimeNegotiable          Boolean                       @default(false)
  selfIntroduction            String?
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime
  deletedAt                   DateTime?
  viewCount                   Int                           @default(0)
  users                       users                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  resume_educations           resume_educations[]
  resume_evaluations          resume_evaluations[]
  resume_experiences          resume_experiences[]
  resume_licenses             resume_licenses[]
  resume_likes                resume_likes[]
  resume_medical_capabilities resume_medical_capabilities[]
}

model forum_comments {
  id                   String           @id @db.VarChar(255)
  forum_id             String           @db.VarChar(255)
  user_id              String           @db.VarChar(255)
  parent_id            String?          @db.VarChar(255)
  content              String
  createdAt            DateTime?        @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime?        @default(now()) @db.Timestamptz(6)
  deletedAt            DateTime?        @db.Timestamptz(6)
  forum_posts          forum_posts      @relation(fields: [forum_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  forum_comments       forum_comments?  @relation("forum_commentsToforum_comments", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  other_forum_comments forum_comments[] @relation("forum_commentsToforum_comments")
  users                users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([createdAt], map: "idx_forum_comments_created_at")
  @@index([forum_id], map: "idx_forum_comments_forum_id")
  @@index([parent_id], map: "idx_forum_comments_parent_id")
  @@index([user_id], map: "idx_forum_comments_user_id")
}

model forum_post_likes {
  id          String      @id
  userId      String
  forumPostId String
  createdAt   DateTime    @default(now())
  forum_posts forum_posts @relation(fields: [forumPostId], references: [id], onDelete: Cascade)
  users       users       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, forumPostId])
  @@index([forumPostId])
  @@index([userId])
}

model forum_posts {
  id               String             @id
  userId           String
  title            String
  content          String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  deletedAt        DateTime?
  animalType       String
  medicalField     String
  viewCount        Int                @default(0)
  forum_comments   forum_comments[]
  forum_post_likes forum_post_likes[]
  users            users              @relation(fields: [userId], references: [id])
}

model hospital_animals {
  id         String   @id
  userId     String
  animalType String
  createdAt  DateTime @default(now())
  users      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model hospital_business_licenses {
  id         String   @id
  userId     String
  fileName   String
  fileUrl    String
  fileType   String
  uploadedAt DateTime @default(now())
  fileSize   Int?
  users      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model hospital_equipments {
  id                         String                     @id
  hospitalProfileId          String
  name                       String
  category                   String
  manufacturer               String?
  model                      String?
  purchaseDate               DateTime?
  description                String?
  image                      String?
  sortOrder                  Int                        @default(0)
  createdAt                  DateTime                   @default(now())
  updatedAt                  DateTime
  detailed_hospital_profiles detailed_hospital_profiles @relation(fields: [hospitalProfileId], references: [id], onDelete: Cascade)
}

model hospital_evaluations {
  id                                           String    @id
  hospitalId                                   String
  userId                                       String
  rating                                       Int
  comment                                      String?
  createdAt                                    DateTime  @default(now())
  updatedAt                                    DateTime
  deletedAt                                    DateTime?
  users_hospital_evaluations_hospitalIdTousers users     @relation("hospital_evaluations_hospitalIdTousers", fields: [hospitalId], references: [id])
  users_hospital_evaluations_userIdTousers     users     @relation("hospital_evaluations_userIdTousers", fields: [userId], references: [id])

  @@unique([hospitalId, userId])
}

model hospital_facility_images {
  id                         String                     @id
  userId                     String
  imageUrl                   String
  displayOrder               Int                        @default(0)
  createdAt                  DateTime                   @default(now())
  updatedAt                  DateTime
  detailed_hospital_profiles detailed_hospital_profiles @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
}

model hospital_profiles {
  id              String    @id
  userId          String    @unique
  hospitalName    String
  businessNumber  String    @unique
  address         String
  phone           String
  website         String?
  description     String?
  businessLicense String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  deletedAt       DateTime?
  users           users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model hospital_specialties {
  id        String   @id
  userId    String
  specialty String
  createdAt DateTime @default(now())
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model hospital_staff {
  id                         String                     @id
  hospitalProfileId          String
  name                       String
  position                   String
  specialization             String?
  experience                 String?
  education                  String?
  profileImage               String?
  introduction               String?
  sortOrder                  Int                        @default(0)
  createdAt                  DateTime                   @default(now())
  updatedAt                  DateTime
  detailed_hospital_profiles detailed_hospital_profiles @relation(fields: [hospitalProfileId], references: [id], onDelete: Cascade)
}

model inquiries {
  id             String        @id
  notificationId String        @unique
  inquiryType    String
  subject        String
  attachments    String[]
  repliedAt      DateTime?
  notifications  notifications @relation(fields: [notificationId], references: [id], onDelete: Cascade)
}

model job_likes {
  id        String   @id
  userId    String
  jobId     String
  createdAt DateTime @default(now())
  jobs      jobs     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
  @@index([jobId])
  @@index([userId])
}

model job_notifications {
  id             String            @id
  notificationId String            @unique
  jobId          String
  applicationId  String
  previousStatus String?
  newStatus      ApplicationStatus
  applications   applications      @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  jobs           jobs              @relation(fields: [jobId], references: [id], onDelete: Cascade)
  notifications  notifications     @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@index([jobId, applicationId])
}

model jobs {
  id                   String              @id
  hospitalId           String
  title                String
  benefits             String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now())
  deletedAt            DateTime?
  certifications       String[]            @default([])
  department           String
  education            String[]            @default([])
  experience           String[]            @default([])
  experienceDetails    String[]            @default([])
  isActive             Boolean             @default(true)
  isDraft              Boolean             @default(false)
  isUnlimitedRecruit   Boolean             @default(false)
  isWorkDaysNegotiable Boolean             @default(false)
  isWorkTimeNegotiable Boolean             @default(false)
  major                String[]            @default([])
  managerEmail         String
  managerName          String
  managerPhone         String
  position             String
  preferences          String[]            @default([])
  recruitEndDate       DateTime?
  salary               String
  viewCount            Int                 @default(0)
  workDays             String[]            @default([])
  workEndTime          String?
  workStartTime        String?
  salaryType           String
  workType             String[]            @default([])
  contact_inquiries    contact_inquiries[]
  job_likes            job_likes[]
  job_notifications    job_notifications[]
  users                users               @relation(fields: [hospitalId], references: [id], map: "jobs_hospitalid_fkey")

  @@index([createdAt], map: "idx_jobs_created_at")
  @@index([deletedAt], map: "idx_jobs_deleted_at")
  @@index([hospitalId], map: "idx_jobs_hospital_id")
  @@index([isActive], map: "idx_jobs_is_active")
  @@index([isDraft], map: "idx_jobs_is_draft")
  @@index([createdAt])
  @@index([hospitalId])
  @@index([isActive])
  @@index([isDraft])
}

model lecture_comments {
  id                     String             @id
  lectureId              String
  userId                 String
  content                String
  createdAt              DateTime           @default(now())
  updatedAt              DateTime
  deletedAt              DateTime?
  parentId               String?            @db.VarChar(255)
  comment_replies        comment_replies[]
  lecture_comments       lecture_comments?  @relation("lecture_commentsTolecture_comments", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_lecture_comment_parent")
  other_lecture_comments lecture_comments[] @relation("lecture_commentsTolecture_comments")
  lectures               lectures           @relation(fields: [lectureId], references: [id])
  users                  users              @relation(fields: [userId], references: [id])

  @@index([lectureId], map: "idx_lecture_comments_lecture_id")
  @@index([parentId], map: "idx_lecture_comments_parent_id")
}

model lecture_likes {
  id        String   @id
  userId    String
  lectureId String
  createdAt DateTime @default(now())
  lectures  lectures @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lectureId])
  @@index([lectureId])
  @@index([userId])
}

model lectures {
  id               String             @id
  title            String
  description      String?
  videoUrl         String
  thumbnail        String?
  duration         Int?
  category         String?
  tags             String[]
  viewCount        Int                @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  deletedAt        DateTime?
  lecture_comments lecture_comments[]
  lecture_likes    lecture_likes[]
}

model messages {
  id                               String        @id
  senderId                         String
  receiverId                       String
  subject                          String?
  content                          String
  status                           MessageStatus @default(UNREAD)
  readAt                           DateTime?
  createdAt                        DateTime      @default(now())
  updatedAt                        DateTime
  users_messages_receiverIdTousers users         @relation("messages_receiverIdTousers", fields: [receiverId], references: [id])
  users_messages_senderIdTousers   users         @relation("messages_senderIdTousers", fields: [senderId], references: [id])
}

model migration_log {
  id             Int       @id @default(autoincrement())
  migration_name String    @unique @db.VarChar(255)
  executed_at    DateTime? @default(now()) @db.Timestamp(6)
  description    String?
}

model notification_batches {
  id              String                  @id
  announcementId  String
  totalRecipients Int
  sentCount       Int                     @default(0)
  failedCount     Int                     @default(0)
  status          NotificationBatchStatus @default(PENDING)
  startedAt       DateTime?
  completedAt     DateTime?
  createdAt       DateTime                @default(now())
  announcements   announcements           @relation(fields: [announcementId], references: [id])
}

model notification_settings {
  id                  String   @id
  userId              String   @unique
  announcementEnabled Boolean  @default(true)
  inquiryEnabled      Boolean  @default(true)
  commentEnabled      Boolean  @default(true)
  jobEnabled          Boolean  @default(true)
  emailNotifications  Boolean  @default(false)
  pushNotifications   Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime
  users               users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model notifications {
  id                                     String                 @id
  type                                   NotificationType
  recipientId                            String
  recipientType                          UserType
  senderId                               String?
  title                                  String
  content                                String
  isRead                                 Boolean                @default(false)
  readAt                                 DateTime?
  createdAt                              DateTime               @default(now())
  updatedAt                              DateTime
  announcements                          announcements?
  comment_notifications                  comment_notifications?
  inquiries                              inquiries?
  job_notifications                      job_notifications?
  users_notifications_recipientIdTousers users                  @relation("notifications_recipientIdTousers", fields: [recipientId], references: [id], onDelete: Cascade)
  users_notifications_senderIdTousers    users?                 @relation("notifications_senderIdTousers", fields: [senderId], references: [id])

  @@index([recipientId, isRead, createdAt(sort: Desc)])
  @@index([type, createdAt(sort: Desc)])
}

model resume_educations {
  id               String           @id
  resumeId         String
  degree           String
  graduationStatus String
  schoolName       String
  major            String
  gpa              String?
  totalGpa         String?
  startDate        DateTime?
  endDate          DateTime?
  sortOrder        Int              @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  detailed_resumes detailed_resumes @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model resume_evaluations {
  id               String           @id
  resumeId         String
  userId           String
  rating           Int
  comment          String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  deletedAt        DateTime?
  detailed_resumes detailed_resumes @relation(fields: [resumeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users            users            @relation(fields: [userId], references: [id])

  @@unique([resumeId, userId])
}

model resume_experiences {
  id               String           @id
  resumeId         String
  hospitalName     String
  mainTasks        String
  startDate        DateTime?
  endDate          DateTime?
  sortOrder        Int              @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  detailed_resumes detailed_resumes @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model resume_licenses {
  id               String           @id
  resumeId         String
  name             String
  issuer           String
  grade            String?
  acquiredDate     DateTime?
  sortOrder        Int              @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  detailed_resumes detailed_resumes @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model resume_likes {
  id               String           @id
  userId           String
  resumeId         String
  createdAt        DateTime         @default(now())
  detailed_resumes detailed_resumes @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  users            users            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, resumeId])
  @@index([resumeId])
  @@index([userId])
}

model resume_medical_capabilities {
  id               String           @id
  resumeId         String
  field            String
  proficiency      String
  description      String?
  others           String?
  sortOrder        Int              @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  detailed_resumes detailed_resumes @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model resumes {
  id                String              @id
  veterinarianId    String
  title             String
  introduction      String?
  experience        String?
  education         String?
  certifications    String?
  skills            String?
  preferredSalary   Int?
  preferredLocation String?
  availableFrom     DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  deletedAt         DateTime?
  contact_inquiries contact_inquiries[]
  users             users               @relation(fields: [veterinarianId], references: [id])
}

model social_accounts {
  id           String   @id
  userId       String
  provider     Provider
  providerId   String
  accessToken  String?
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
}

model transfer_likes {
  id         String    @id
  userId     String
  transferId String
  createdAt  DateTime  @default(now())
  transfers  transfers @relation(fields: [transferId], references: [id], onDelete: Cascade)
  users      users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, transferId])
  @@index([transferId])
  @@index([userId])
}

model transfers {
  id             String           @id
  userId         String
  title          String
  description    String
  location       String
  price          Int?
  category       String
  images         String[]
  status         TransferStatus   @default(ACTIVE)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  deletedAt      DateTime?
  area           Int?
  base_address   String?
  detail_address String?
  latitude       Float?
  longitude      Float?
  sido           String?
  sigungu        String?
  views          Int              @default(0)
  transfer_likes transfer_likes[]
  users          users            @relation(fields: [userId], references: [id])
}

model users {
  id                                                          String                       @id
  email                                                       String                       @unique
  phone                                                       String                       @unique
  passwordHash                                                String?
  profileImage                                                String?
  userType                                                    UserType
  provider                                                    Provider                     @default(NORMAL)
  isActive                                                    Boolean                      @default(true)
  termsAgreedAt                                               DateTime
  privacyAgreedAt                                             DateTime
  marketingAgreedAt                                           DateTime?
  deletedAt                                                   DateTime?
  withdrawReason                                              String?
  restoredAt                                                  DateTime?
  createdAt                                                   DateTime                     @default(now())
  updatedAt                                                   DateTime
  realName                                                    String
  birthDate                                                   DateTime?
  businessNumber                                              String?                      @unique
  establishedDate                                             DateTime?
  hospitalAddress                                             String?
  hospitalAddressDetail                                       String?
  hospitalLogo                                                String?
  hospitalName                                                String?
  hospitalWebsite                                             String?
  lastLoginAt                                                 DateTime?                    @db.Timestamp(6)
  licenseImage                                                String?
  loginId                                                     String?                      @unique @db.VarChar(100)
  nickname                                                    String?                      @db.VarChar(100)
  seq                                                         Int                          @unique @default(autoincrement())
  universityEmail                                             String?                      @unique
  announcements                                               announcements[]
  applications                                                applications[]
  comment_replies                                             comment_replies[]
  contact_inquiries_contact_inquiries_recipient_idTousers     contact_inquiries[]          @relation("contact_inquiries_recipient_idTousers")
  contact_inquiries_contact_inquiries_sender_idTousers        contact_inquiries[]          @relation("contact_inquiries_sender_idTousers")
  detailed_hospital_profiles                                  detailed_hospital_profiles?
  detailed_resumes                                            detailed_resumes?
  forum_comments                                              forum_comments[]
  forum_post_likes                                            forum_post_likes[]
  forum_posts                                                 forum_posts[]
  hospital_animals                                            hospital_animals[]
  hospital_business_licenses                                  hospital_business_licenses[]
  hospital_evaluations_hospital_evaluations_hospitalIdTousers hospital_evaluations[]       @relation("hospital_evaluations_hospitalIdTousers")
  hospital_evaluations_hospital_evaluations_userIdTousers     hospital_evaluations[]       @relation("hospital_evaluations_userIdTousers")
  hospital_profiles                                           hospital_profiles?
  hospital_specialties                                        hospital_specialties[]
  job_likes                                                   job_likes[]
  jobs                                                        jobs[]
  lecture_comments                                            lecture_comments[]
  lecture_likes                                               lecture_likes[]
  messages_messages_receiverIdTousers                         messages[]                   @relation("messages_receiverIdTousers")
  messages_messages_senderIdTousers                           messages[]                   @relation("messages_senderIdTousers")
  notification_settings                                       notification_settings?
  notifications_notifications_recipientIdTousers              notifications[]              @relation("notifications_recipientIdTousers")
  notifications_notifications_senderIdTousers                 notifications[]              @relation("notifications_senderIdTousers")
  resume_evaluations                                          resume_evaluations[]
  resume_likes                                                resume_likes[]
  resumes                                                     resumes[]
  social_accounts                                             social_accounts[]
  transfer_likes                                              transfer_likes[]
  transfers                                                   transfers[]
  veterinarian_profiles                                       veterinarian_profiles?

  @@index([loginId], map: "idx_users_loginid")
  @@index([nickname], map: "idx_users_nickname")
}

model veterinarian_profiles {
  id           String    @id
  userId       String    @unique
  nickname     String
  birthDate    DateTime?
  licenseImage String?
  experience   String?
  specialty    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  deletedAt    DateTime?
  users        users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model view_logs {
  id              String   @id
  content_type    String
  content_id      String
  user_id         String?
  user_identifier String
  ip_address      String
  created_at      DateTime @default(now())

  @@index([content_type, content_id])
  @@index([created_at])
  @@index([user_id])
  @@index([user_identifier])
}

enum AnimalType {
  DOG
  CAT
  EXOTIC
  LARGE_ANIMAL
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  ACCEPTED
  REJECTED
}

enum JobStatus {
  ACTIVE
  CLOSED
  DRAFT
}

enum MessageStatus {
  UNREAD
  READ
}

enum NotificationBatchStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum NotificationPriority {
  HIGH
  NORMAL
  LOW
}

enum NotificationType {
  ANNOUNCEMENT
  INQUIRY
  COMMENT
  REPLY
  APPLICATION_STATUS
  APPLICATION_NEW
}

enum Provider {
  NORMAL
  GOOGLE
  KAKAO
  NAVER
}

enum SalaryType {
  HOURLY
  MONTHLY
  YEARLY
  NEGOTIABLE
}

enum SpecialtyType {
  INTERNAL_MEDICINE
  SURGERY
  DERMATOLOGY
  DENTISTRY
  OPHTHALMOLOGY
  NEUROLOGY
  ORTHOPEDICS
}

enum TransferStatus {
  ACTIVE
  SOLD
  RESERVED
  DISABLED
}

enum UserType {
  VETERINARIAN
  HOSPITAL
  VETERINARY_STUDENT
}

enum WorkType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}
