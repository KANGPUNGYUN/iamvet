generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  phone                   String                   @unique
  passwordHash            String?
  profileImage            String?
  userType                UserType
  provider                Provider                 @default(NORMAL)
  isActive                Boolean                  @default(true)
  termsAgreedAt           DateTime
  privacyAgreedAt         DateTime
  marketingAgreedAt       DateTime?
  deletedAt               DateTime?
  withdrawReason          String?
  restoredAt              DateTime?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  realName                String
  birthDate               DateTime?
  nickname                String?                  @db.VarChar(100)
  loginId                 String?                  @unique @db.VarChar(100)
  universityEmail         String?                  @unique
  hospitalName            String?
  establishedDate         DateTime?
  businessNumber          String?                  @unique
  hospitalWebsite         String?
  hospitalLogo            String?
  hospitalAddress         String?
  hospitalAddressDetail   String?
  licenseImage            String?
  seq                     Int                      @unique @default(autoincrement())
  applications            Application[]
  commentReplies          CommentReply[]
  detailedHospitalProfile DetailedHospitalProfile?
  detailedResume          DetailedResume?
  forumPosts              ForumPost[]
  hospitalEvaluations     HospitalEvaluation[]     @relation("HospitalEvaluations")
  userHospitalEvaluations HospitalEvaluation[]     @relation("UserHospitalEvaluations")
  hospital_profiles       hospital_profiles?
  jobBookmarks            JobBookmark[]
  jobs                    Job[]
  lectureBookmarks        LectureBookmark[]
  lectureComments         LectureComment[]
  receivedMessages        Message[]                @relation("ReceivedMessages")
  sentMessages            Message[]                @relation("SentMessages")
  resumeBookmarks         ResumeBookmark[]
  resumeEvaluations       ResumeEvaluation[]
  resumes                 Resume[]
  socialAccounts          SocialAccount[]
  transferBookmarks       TransferBookmark[]
  transfers               Transfer[]
  veterinarian_profiles   veterinarian_profiles?

  @@index([loginId], map: "idx_users_loginid")
  @@index([nickname], map: "idx_users_nickname")
  @@map("users")
}

model SocialAccount {
  id           String   @id @default(cuid())
  userId       String
  provider     Provider
  providerId   String
  accessToken  String?
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("social_accounts")
}

model Job {
  id                   String    @id @default(cuid())
  hospitalId           String
  title                String
  workType             String[]  @default([])
  isUnlimitedRecruit   Boolean   @default(false)
  recruitEndDate       DateTime?
  major                String[]  @default([])
  experience           String[]  @default([])
  position             String
  salaryType           String
  salary               String
  workDays             String[]  @default([])
  isWorkDaysNegotiable Boolean   @default(false)
  workStartTime        String?
  workEndTime          String?
  isWorkTimeNegotiable Boolean   @default(false)
  benefits             String?
  education            String[]  @default([])
  certifications       String[]  @default([])
  experienceDetails    String[]  @default([])
  preferences          String[]  @default([])
  managerName          String
  managerPhone         String
  managerEmail         String
  department           String
  isActive             Boolean   @default(true)
  isDraft              Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @default(now()) @updatedAt
  deletedAt            DateTime?
  hospital             User      @relation(fields: [hospitalId], references: [id], map: "jobs_hospitalid_fkey")

  @@index([createdAt], map: "idx_jobs_created_at")
  @@index([deletedAt], map: "idx_jobs_deleted_at")
  @@index([hospitalId], map: "idx_jobs_hospital_id")
  @@index([isActive], map: "idx_jobs_is_active")
  @@index([isDraft], map: "idx_jobs_is_draft")
  @@index([createdAt])
  @@index([hospitalId])
  @@index([isActive])
  @@index([isDraft])
  @@map("jobs")
}

model Resume {
  id                String             @id @default(cuid())
  veterinarianId    String
  title             String
  introduction      String?
  experience        String?
  education         String?
  certifications    String?
  skills            String?
  preferredSalary   Int?
  preferredLocation String?
  availableFrom     DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  bookmarks         ResumeBookmark[]
  evaluations       ResumeEvaluation[]
  veterinarian      User               @relation(fields: [veterinarianId], references: [id])

  @@map("resumes")
}

model Application {
  id             String            @id @default(cuid())
  jobId          String
  veterinarianId String
  coverLetter    String?
  status         ApplicationStatus @default(PENDING)
  appliedAt      DateTime          @default(now())
  reviewedAt     DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  veterinarian   User              @relation(fields: [veterinarianId], references: [id])

  @@unique([jobId, veterinarianId])
  @@index([jobId], map: "idx_applications_job_id")
  @@index([status], map: "idx_applications_status")
  @@index([veterinarianId], map: "idx_applications_veterinarian_id")
  @@map("applications")
}

model Lecture {
  id          String            @id @default(cuid())
  title       String
  description String?
  videoUrl    String
  thumbnail   String?
  duration    Int?
  category    String?
  tags        String[]
  viewCount   Int               @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  deletedAt   DateTime?
  bookmarks   LectureBookmark[]
  comments    LectureComment[]

  @@map("lectures")
}

model LectureComment {
  id        String         @id @default(cuid())
  lectureId String
  userId    String
  content   String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  deletedAt DateTime?
  replies   CommentReply[]
  lecture   Lecture        @relation(fields: [lectureId], references: [id])
  user      User           @relation(fields: [userId], references: [id])

  @@map("lecture_comments")
}

model CommentReply {
  id        String         @id @default(cuid())
  commentId String
  userId    String
  content   String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  deletedAt DateTime?
  comment   LectureComment @relation(fields: [commentId], references: [id])
  user      User           @relation(fields: [userId], references: [id])

  @@map("comment_replies")
}

model Transfer {
  id          String             @id @default(cuid())
  userId      String
  title       String
  description String
  location    String
  price       Int?
  category    String
  images      String[]
  status      TransferStatus     @default(ACTIVE)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  deletedAt   DateTime?
  bookmarks   TransferBookmark[]
  user        User               @relation(fields: [userId], references: [id])

  @@map("transfers")
}

model ForumPost {
  id        String    @id @default(cuid())
  userId    String
  title     String
  content   String
  category  String?
  tags      String[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])

  @@map("forum_posts")
}

model Message {
  id         String        @id @default(cuid())
  senderId   String
  receiverId String
  subject    String?
  content    String
  status     MessageStatus @default(UNREAD)
  readAt     DateTime?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  receiver   User          @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User          @relation("SentMessages", fields: [senderId], references: [id])

  @@map("messages")
}

model JobBookmark {
  id        String    @id @default(cuid())
  userId    String
  jobId     String
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, jobId])
  @@map("job_bookmarks")
}

model ResumeBookmark {
  id        String    @id @default(cuid())
  userId    String
  resumeId  String
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  resume    Resume    @relation(fields: [resumeId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, resumeId])
  @@map("resume_bookmarks")
}

model LectureBookmark {
  id        String    @id @default(cuid())
  userId    String
  lectureId String
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  lecture   Lecture   @relation(fields: [lectureId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, lectureId])
  @@map("lecture_bookmarks")
}

model TransferBookmark {
  id         String    @id @default(cuid())
  userId     String
  transferId String
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  transfer   Transfer  @relation(fields: [transferId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@unique([userId, transferId])
  @@map("transfer_bookmarks")
}

model HospitalEvaluation {
  id         String    @id @default(cuid())
  hospitalId String
  userId     String
  rating     Int
  comment    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  hospital   User      @relation("HospitalEvaluations", fields: [hospitalId], references: [id])
  user       User      @relation("UserHospitalEvaluations", fields: [userId], references: [id])

  @@unique([hospitalId, userId])
  @@map("hospital_evaluations")
}

model ResumeEvaluation {
  id        String    @id @default(cuid())
  resumeId  String
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  resume    Resume    @relation(fields: [resumeId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([resumeId, userId])
  @@map("resume_evaluations")
}

model DetailedResume {
  id                  String                    @id @default(cuid())
  userId              String                    @unique
  photo               String?
  name                String
  birthDate           String?
  introduction        String?
  phone               String?
  email               String?
  phonePublic         Boolean                   @default(false)
  emailPublic         Boolean                   @default(false)
  position            String?
  specialties         String[]
  preferredRegions    String[]
  expectedSalary      String?
  workTypes           String[]
  startDate           String?
  preferredWeekdays   String[]
  weekdaysNegotiable  Boolean                   @default(false)
  workStartTime       String?
  workEndTime         String?
  workTimeNegotiable  Boolean                   @default(false)
  selfIntroduction    String?
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  deletedAt           DateTime?
  user                User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  educations          ResumeEducation[]
  experiences         ResumeExperience[]
  licenses            ResumeLicense[]
  medicalCapabilities ResumeMedicalCapability[]

  @@map("detailed_resumes")
}

model ResumeExperience {
  id           String         @id @default(cuid())
  resumeId     String
  hospitalName String
  mainTasks    String
  startDate    DateTime?
  endDate      DateTime?
  sortOrder    Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  resume       DetailedResume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("resume_experiences")
}

model ResumeLicense {
  id           String         @id @default(cuid())
  resumeId     String
  name         String
  issuer       String
  grade        String?
  acquiredDate DateTime?
  sortOrder    Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  resume       DetailedResume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("resume_licenses")
}

model ResumeEducation {
  id               String         @id @default(cuid())
  resumeId         String
  degree           String
  graduationStatus String
  schoolName       String
  major            String
  gpa              String?
  totalGpa         String?
  startDate        DateTime?
  endDate          DateTime?
  sortOrder        Int            @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  resume           DetailedResume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("resume_educations")
}

model ResumeMedicalCapability {
  id          String         @id @default(cuid())
  resumeId    String
  field       String
  proficiency String
  description String?
  others      String?
  sortOrder   Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  resume      DetailedResume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("resume_medical_capabilities")
}

model DetailedHospitalProfile {
  id                  String              @id @default(cuid())
  userId              String              @unique
  hospitalName        String
  businessNumber      String
  address             String
  phone               String
  website             String?
  description         String?
  businessLicense     String?
  hospitalLogo        String?
  establishedDate     String?
  detailAddress       String?
  email               String?
  treatmentAnimals    String[]
  treatmentFields     String[]
  operatingHours      Json?
  emergencyService    Boolean             @default(false)
  parkingAvailable    Boolean             @default(false)
  publicTransportInfo String?
  totalBeds           Int?
  surgeryRooms        Int?
  xrayRoom            Boolean             @default(false)
  ctScan              Boolean             @default(false)
  ultrasound          Boolean             @default(false)
  grooming            Boolean             @default(false)
  boarding            Boolean             @default(false)
  petTaxi             Boolean             @default(false)
  certifications      String[]
  awards              String[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  deletedAt           DateTime?
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  equipments          HospitalEquipment[]
  staff               HospitalStaff[]

  @@map("detailed_hospital_profiles")
}

model HospitalStaff {
  id                String                  @id @default(cuid())
  hospitalProfileId String
  name              String
  position          String
  specialization    String?
  experience        String?
  education         String?
  profileImage      String?
  introduction      String?
  sortOrder         Int                     @default(0)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  hospitalProfile   DetailedHospitalProfile @relation(fields: [hospitalProfileId], references: [id], onDelete: Cascade)

  @@map("hospital_staff")
}

model HospitalEquipment {
  id                String                  @id @default(cuid())
  hospitalProfileId String
  name              String
  category          String
  manufacturer      String?
  model             String?
  purchaseDate      DateTime?
  description       String?
  image             String?
  sortOrder         Int                     @default(0)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  hospitalProfile   DetailedHospitalProfile @relation(fields: [hospitalProfileId], references: [id], onDelete: Cascade)

  @@map("hospital_equipments")
}

model hospital_profiles {
  id              String    @id
  userId          String    @unique
  hospitalName    String
  businessNumber  String    @unique
  address         String
  phone           String
  website         String?
  description     String?
  businessLicense String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  deletedAt       DateTime?
  users           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model veterinarian_profiles {
  id           String    @id
  userId       String    @unique
  nickname     String
  birthDate    DateTime?
  licenseImage String?
  experience   String?
  specialty    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  deletedAt    DateTime?
  users        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model migration_log {
  id             Int       @id @default(autoincrement())
  migration_name String    @unique @db.VarChar(255)
  executed_at    DateTime? @default(now()) @db.Timestamp(6)
  description    String?
}

enum UserType {
  VETERINARIAN
  HOSPITAL
  VETERINARY_STUDENT
}

enum AnimalType {
  DOG
  CAT
  EXOTIC
  LARGE_ANIMAL
}

enum SpecialtyType {
  INTERNAL_MEDICINE
  SURGERY
  DERMATOLOGY
  DENTISTRY
  OPHTHALMOLOGY
  NEUROLOGY
  ORTHOPEDICS
}

enum Provider {
  NORMAL
  GOOGLE
  KAKAO
  NAVER
}

enum JobStatus {
  ACTIVE
  CLOSED
  DRAFT
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  ACCEPTED
  REJECTED
}

enum SalaryType {
  HOURLY
  MONTHLY
  YEARLY
  NEGOTIABLE
}

enum WorkType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum TransferStatus {
  ACTIVE
  SOLD
  RESERVED
}

enum MessageStatus {
  UNREAD
  READ
}
