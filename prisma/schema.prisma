generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model announcements {
  id                   String                 @id
  notificationId       String                 @unique
  targetUserTypes      String[]
  priority             NotificationPriority   @default(NORMAL)
  expiresAt            DateTime?
  createdBy            String
  users                users                  @relation(fields: [createdBy], references: [id])
  notifications        notifications          @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notification_batches notification_batches[]
}

model applications {
  id                String              @id
  jobId             String
  veterinarianId    String
  coverLetter       String?
  status            ApplicationStatus   @default(PENDING)
  appliedAt         DateTime            @default(now())
  reviewedAt        DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  users             users               @relation(fields: [veterinarianId], references: [id])
  job_notifications job_notifications[]

  @@unique([jobId, veterinarianId])
  @@index([jobId], map: "idx_applications_job_id")
  @@index([status], map: "idx_applications_status")
  @@index([veterinarianId], map: "idx_applications_veterinarian_id")
}

model comment_notifications {
  id              String        @id
  notificationId  String        @unique
  postType        String
  postId          String
  commentId       String
  parentCommentId String?
  notifications   notifications @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@index([postType, postId])
}

model comment_replies {
  id               String           @id
  commentId        String
  userId           String
  content          String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  deletedAt        DateTime?
  lecture_comments lecture_comments @relation(fields: [commentId], references: [id])
  users            users            @relation(fields: [userId], references: [id])
}

model contact_inquiries {
  id                                          String   @id
  sender_id                                   String
  recipient_id                                String
  job_id                                      String?
  resume_id                                   String?
  subject                                     String
  message                                     String
  type                                        String   @default("general")
  is_read                                     Boolean  @default(false)
  created_at                                  DateTime @default(now())
  updated_at                                  DateTime
  jobs                                        jobs?    @relation(fields: [job_id], references: [id])
  users_contact_inquiries_recipient_idTousers users    @relation("contact_inquiries_recipient_idTousers", fields: [recipient_id], references: [id], onDelete: Cascade)
  resumes                                     resumes? @relation(fields: [resume_id], references: [id])
  users_contact_inquiries_sender_idTousers    users    @relation("contact_inquiries_sender_idTousers", fields: [sender_id], references: [id], onDelete: Cascade)

  @@index([created_at])
  @@index([is_read])
  @@index([job_id])
  @@index([recipient_id])
  @@index([resume_id])
  @@index([sender_id])
}

model detailed_resumes {
  id                          String                        @id
  userId                      String                        @unique
  photo                       String?
  name                        String
  birthDate                   String?
  introduction                String?
  phone                       String?
  email                       String?
  phonePublic                 Boolean                       @default(false)
  emailPublic                 Boolean                       @default(false)
  position                    String?
  specialties                 String[]
  preferredRegions            String[]
  expectedSalary              String?
  workTypes                   String[]
  startDate                   String?
  preferredWeekdays           String[]
  weekdaysNegotiable          Boolean                       @default(false)
  workStartTime               String?
  workEndTime                 String?
  workTimeNegotiable          Boolean                       @default(false)
  selfIntroduction            String?
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime
  deletedAt                   DateTime?
  viewCount                   Int                           @default(0)
  users                       users                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  resume_educations           resume_educations[]
  resume_evaluations          resume_evaluations[]
  resume_experiences          resume_experiences[]
  resume_licenses             resume_licenses[]
  resume_likes                resume_likes[]
  resume_medical_capabilities resume_medical_capabilities[]
  resume_portfolio_files      resume_portfolio_files[]
}

model forum_comments {
  id                   String           @id @db.VarChar(255)
  forum_id             String           @db.VarChar(255)
  user_id              String           @db.VarChar(255)
  parent_id            String?          @db.VarChar(255)
  content              String
  createdAt            DateTime?        @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime?        @default(now()) @db.Timestamptz(6)
  deletedAt            DateTime?        @db.Timestamptz(6)
  forum_posts          forum_posts      @relation(fields: [forum_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  forum_comments       forum_comments?  @relation("forum_commentsToforum_comments", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  other_forum_comments forum_comments[] @relation("forum_commentsToforum_comments")
  users                users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([createdAt], map: "idx_forum_comments_created_at")
  @@index([forum_id], map: "idx_forum_comments_forum_id")
  @@index([parent_id], map: "idx_forum_comments_parent_id")
  @@index([user_id], map: "idx_forum_comments_user_id")
}

model forum_post_likes {
  id          String      @id
  userId      String
  forumPostId String
  createdAt   DateTime    @default(now())
  forum_posts forum_posts @relation(fields: [forumPostId], references: [id], onDelete: Cascade)
  users       users       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, forumPostId])
  @@index([forumPostId])
  @@index([userId])
}

model forum_posts {
  id               String             @id
  userId           String
  title            String
  content          String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  deletedAt        DateTime?
  animalType       String
  medicalField     String
  viewCount        Int                @default(0)
  forum_bookmarks  forum_bookmarks[]
  forum_comments   forum_comments[]
  forum_post_likes forum_post_likes[]
  users            users              @relation(fields: [userId], references: [id])
}

model hospital_animals {
  id         String   @id
  userId     String
  animalType String
  createdAt  DateTime @default(now())
  users      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model hospital_business_licenses {
  id         String   @id
  userId     String
  fileName   String
  fileUrl    String
  fileType   String
  uploadedAt DateTime @default(now())
  fileSize   Int?
  users      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model hospital_evaluations {
  id                                           String    @id
  hospitalId                                   String
  userId                                       String
  rating                                       Int
  comment                                      String?
  createdAt                                    DateTime  @default(now())
  updatedAt                                    DateTime
  deletedAt                                    DateTime?
  users_hospital_evaluations_hospitalIdTousers users     @relation("hospital_evaluations_hospitalIdTousers", fields: [hospitalId], references: [id])
  users_hospital_evaluations_userIdTousers     users     @relation("hospital_evaluations_userIdTousers", fields: [userId], references: [id])

  @@unique([hospitalId, userId])
}

model hospital_specialties {
  id        String   @id
  userId    String
  specialty String
  createdAt DateTime @default(now())
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model inquiries {
  id             String        @id
  notificationId String        @unique
  inquiryType    String
  subject        String
  attachments    String[]
  repliedAt      DateTime?
  notifications  notifications @relation(fields: [notificationId], references: [id], onDelete: Cascade)
}

model job_likes {
  id        String   @id
  userId    String
  jobId     String
  createdAt DateTime @default(now())
  jobs      jobs     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
  @@index([jobId])
  @@index([userId])
}

model job_notifications {
  id             String            @id
  notificationId String            @unique
  jobId          String
  applicationId  String
  previousStatus String?
  newStatus      ApplicationStatus
  applications   applications      @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  jobs           jobs              @relation(fields: [jobId], references: [id], onDelete: Cascade)
  notifications  notifications     @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@index([jobId, applicationId])
}

model jobs {
  id                   String              @id
  hospitalId           String
  title                String
  benefits             String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now())
  deletedAt            DateTime?
  certifications       String[]            @default([])
  department           String
  education            String[]            @default([])
  experience           String[]            @default([])
  experienceDetails    String[]            @default([])
  isActive             Boolean             @default(true)
  isDraft              Boolean             @default(false)
  isUnlimitedRecruit   Boolean             @default(false)
  isWorkDaysNegotiable Boolean             @default(false)
  isWorkTimeNegotiable Boolean             @default(false)
  major                String[]            @default([])
  managerEmail         String
  managerName          String
  managerPhone         String
  position             String
  preferences          String[]            @default([])
  recruitEndDate       DateTime?
  salary               String
  workDays             String[]            @default([])
  workEndTime          String?
  workStartTime        String?
  salaryType           String
  workType             String[]            @default([])
  viewCount            Int                 @default(0)
  contact_inquiries    contact_inquiries[]
  job_likes            job_likes[]
  job_notifications    job_notifications[]
  users                users               @relation(fields: [hospitalId], references: [id], map: "jobs_hospitalid_fkey")

  @@index([createdAt], map: "idx_jobs_created_at")
  @@index([deletedAt], map: "idx_jobs_deleted_at")
  @@index([hospitalId], map: "idx_jobs_hospital_id")
  @@index([isActive], map: "idx_jobs_is_active")
  @@index([isDraft], map: "idx_jobs_is_draft")
  @@index([createdAt])
  @@index([hospitalId])
  @@index([isActive])
  @@index([isDraft])
}

model lecture_comments {
  id                     String             @id
  lectureId              String
  userId                 String
  content                String
  createdAt              DateTime           @default(now())
  updatedAt              DateTime
  deletedAt              DateTime?
  parentId               String?            @db.VarChar(255)
  comment_replies        comment_replies[]
  lecture_comments       lecture_comments?  @relation("lecture_commentsTolecture_comments", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_lecture_comment_parent")
  other_lecture_comments lecture_comments[] @relation("lecture_commentsTolecture_comments")
  lectures               lectures           @relation(fields: [lectureId], references: [id])
  users                  users              @relation(fields: [userId], references: [id])

  @@index([lectureId], map: "idx_lecture_comments_lecture_id")
  @@index([parentId], map: "idx_lecture_comments_parent_id")
}

model lecture_likes {
  id        String   @id
  userId    String
  lectureId String
  createdAt DateTime @default(now())
  lectures  lectures @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lectureId])
  @@index([lectureId])
  @@index([userId])
}

model lectures {
  id                 String             @id
  title              String
  description        String?
  videoUrl           String
  thumbnail          String?
  duration           Int?
  category           String?
  tags               String[]
  viewCount          Int                @default(0)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  deletedAt          DateTime?
  instructor         String?            @db.VarChar(255)
  referenceMaterials Json?              @default("[]")
  lecture_comments   lecture_comments[]
  lecture_likes      lecture_likes[]
}

model messages {
  id                               String        @id
  senderId                         String
  receiverId                       String
  subject                          String?
  content                          String
  status                           MessageStatus @default(UNREAD)
  readAt                           DateTime?
  createdAt                        DateTime      @default(now())
  updatedAt                        DateTime
  users_messages_receiverIdTousers users         @relation("messages_receiverIdTousers", fields: [receiverId], references: [id])
  users_messages_senderIdTousers   users         @relation("messages_senderIdTousers", fields: [senderId], references: [id])
}

model migration_log {
  id             Int       @id @default(autoincrement())
  migration_name String    @unique @db.VarChar(255)
  executed_at    DateTime? @default(now()) @db.Timestamp(6)
  description    String?
}

model notification_batches {
  id              String                  @id
  announcementId  String
  totalRecipients Int
  sentCount       Int                     @default(0)
  failedCount     Int                     @default(0)
  status          NotificationBatchStatus @default(PENDING)
  startedAt       DateTime?
  completedAt     DateTime?
  createdAt       DateTime                @default(now())
  announcements   announcements           @relation(fields: [announcementId], references: [id])
}

model notification_settings {
  id                  String   @id
  userId              String   @unique
  announcementEnabled Boolean  @default(true)
  inquiryEnabled      Boolean  @default(true)
  commentEnabled      Boolean  @default(true)
  jobEnabled          Boolean  @default(true)
  emailNotifications  Boolean  @default(false)
  pushNotifications   Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime
  users               users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model notifications {
  id                                     String                 @id
  type                                   NotificationType
  recipientId                            String
  recipientType                          UserType
  senderId                               String?
  title                                  String
  content                                String
  isRead                                 Boolean                @default(false)
  readAt                                 DateTime?
  createdAt                              DateTime               @default(now())
  updatedAt                              DateTime
  announcements                          announcements?
  comment_notifications                  comment_notifications?
  inquiries                              inquiries?
  job_notifications                      job_notifications?
  users_notifications_recipientIdTousers users                  @relation("notifications_recipientIdTousers", fields: [recipientId], references: [id], onDelete: Cascade)
  users_notifications_senderIdTousers    users?                 @relation("notifications_senderIdTousers", fields: [senderId], references: [id])

  @@index([recipientId, isRead, createdAt(sort: Desc)])
  @@index([type, createdAt(sort: Desc)])
}

model resume_educations {
  id               String           @id
  resumeId         String
  degree           String
  graduationStatus String
  schoolName       String
  major            String
  gpa              String?
  totalGpa         String?
  startDate        DateTime?
  endDate          DateTime?
  sortOrder        Int              @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  detailed_resumes detailed_resumes @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model resume_evaluations {
  id               String           @id
  resumeId         String
  userId           String
  rating           Int
  comment          String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  deletedAt        DateTime?
  detailed_resumes detailed_resumes @relation(fields: [resumeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users            users            @relation(fields: [userId], references: [id])

  @@unique([resumeId, userId])
}

model resume_experiences {
  id               String           @id
  resumeId         String
  hospitalName     String
  mainTasks        String
  startDate        DateTime?
  endDate          DateTime?
  sortOrder        Int              @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  detailed_resumes detailed_resumes @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model resume_licenses {
  id               String           @id
  resumeId         String
  name             String
  issuer           String
  acquiredDate     DateTime?
  sortOrder        Int              @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  detailed_resumes detailed_resumes @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model resume_likes {
  id               String           @id
  userId           String
  resumeId         String
  createdAt        DateTime         @default(now())
  detailed_resumes detailed_resumes @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  users            users            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, resumeId])
  @@index([resumeId])
  @@index([userId])
}

model resume_medical_capabilities {
  id               String           @id
  resumeId         String
  field            String
  proficiency      String
  description      String?
  others           String?
  sortOrder        Int              @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  detailed_resumes detailed_resumes @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model resume_portfolio_files {
  id               String           @id
  resumeId         String
  fileName         String
  fileUrl          String
  fileType         String?
  fileSize         Int?
  sortOrder        Int              @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  detailed_resumes detailed_resumes @relation(fields: [resumeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([resumeId], map: "resume_portfolio_files_resumeid_idx")
}

model resumes {
  id                String              @id
  veterinarianId    String
  title             String
  introduction      String?
  experience        String?
  education         String?
  certifications    String?
  skills            String?
  preferredSalary   Int?
  preferredLocation String?
  availableFrom     DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  deletedAt         DateTime?
  contact_inquiries contact_inquiries[]
  users             users               @relation(fields: [veterinarianId], references: [id])
}

model social_accounts {
  id           String   @id
  userId       String
  provider     Provider
  providerId   String
  accessToken  String?
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
}

model transfer_likes {
  id         String    @id
  userId     String
  transferId String
  createdAt  DateTime  @default(now())
  transfers  transfers @relation(fields: [transferId], references: [id], onDelete: Cascade)
  users      users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, transferId])
  @@index([transferId])
  @@index([userId])
}

model transfers {
  id             String           @id
  userId         String
  title          String
  description    String
  location       String
  price          BigInt?
  category       String
  images         String[]
  status         TransferStatus   @default(ACTIVE)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  deletedAt      DateTime?
  area           Int?
  base_address   String?
  detail_address String?
  latitude       Float?
  longitude      Float?
  sido           String?
  sigungu        String?
  views          Int              @default(0)
  documents      Json?            @default("[]")
  transfer_likes transfer_likes[]
  users          users            @relation(fields: [userId], references: [id])

  @@index([documents], map: "idx_transfers_documents", type: Gin)
}

model users {
  id                                                          String                       @id
  email                                                       String                       @unique
  phone                                                       String                       @unique
  passwordHash                                                String?
  profileImage                                                String?
  userType                                                    UserType
  provider                                                    Provider                     @default(NORMAL)
  isActive                                                    Boolean                      @default(true)
  termsAgreedAt                                               DateTime
  privacyAgreedAt                                             DateTime
  marketingAgreedAt                                           DateTime?
  deletedAt                                                   DateTime?
  withdrawReason                                              String?
  restoredAt                                                  DateTime?
  createdAt                                                   DateTime                     @default(now())
  updatedAt                                                   DateTime
  realName                                                    String?
  birthDate                                                   DateTime?
  businessNumber                                              String?                      @unique
  establishedDate                                             DateTime?
  hospitalAddress                                             String?
  hospitalAddressDetail                                       String?
  hospitalLogo                                                String?
  hospitalName                                                String?
  hospitalWebsite                                             String?
  licenseImage                                                String?
  loginId                                                     String?                      @unique @db.VarChar(100)
  nickname                                                    String?                      @db.VarChar(100)
  seq                                                         Int                          @unique @default(autoincrement())
  universityEmail                                             String?                      @unique
  lastLoginAt                                                 DateTime?                    @db.Timestamp(6)
  announcements                                               announcements[]
  applications                                                applications[]
  comment_replies                                             comment_replies[]
  contact_inquiries_contact_inquiries_recipient_idTousers     contact_inquiries[]          @relation("contact_inquiries_recipient_idTousers")
  contact_inquiries_contact_inquiries_sender_idTousers        contact_inquiries[]          @relation("contact_inquiries_sender_idTousers")
  detailed_resumes                                            detailed_resumes?
  email_verifications                                         email_verifications[]
  forum_bookmarks                                             forum_bookmarks[]
  forum_comments                                              forum_comments[]
  forum_post_likes                                            forum_post_likes[]
  forum_posts                                                 forum_posts[]
  hospital_animals                                            hospital_animals[]
  hospital_business_licenses                                  hospital_business_licenses[]
  hospital_evaluations_hospital_evaluations_hospitalIdTousers hospital_evaluations[]       @relation("hospital_evaluations_hospitalIdTousers")
  hospital_evaluations_hospital_evaluations_userIdTousers     hospital_evaluations[]       @relation("hospital_evaluations_userIdTousers")
  hospital_images                                             hospital_images[]
  hospital_specialties                                        hospital_specialties[]
  hospitals                                                   hospitals?
  job_likes                                                   job_likes[]
  jobs                                                        jobs[]
  lecture_comments                                            lecture_comments[]
  lecture_likes                                               lecture_likes[]
  messages_messages_receiverIdTousers                         messages[]                   @relation("messages_receiverIdTousers")
  messages_messages_senderIdTousers                           messages[]                   @relation("messages_senderIdTousers")
  notification_settings                                       notification_settings?
  notifications_notifications_recipientIdTousers              notifications[]              @relation("notifications_recipientIdTousers")
  notifications_notifications_senderIdTousers                 notifications[]              @relation("notifications_senderIdTousers")
  resume_evaluations                                          resume_evaluations[]
  resume_likes                                                resume_likes[]
  resumes                                                     resumes[]
  social_accounts                                             social_accounts[]
  transfer_likes                                              transfer_likes[]
  transfers                                                   transfers[]
  veterinarian_profiles                                       veterinarian_profiles?
  veterinarians                                               veterinarians?
  veterinary_students                                         veterinary_students?

  @@index([loginId], map: "idx_users_loginid")
  @@index([nickname], map: "idx_users_nickname")
}

model veterinarians {
  id           String    @id @db.VarChar
  userId       String    @unique @db.VarChar
  realName     String    @db.VarChar
  birthDate    DateTime? @db.Timestamp(6)
  nickname     String?   @db.VarChar(100)
  licenseImage String?   @db.VarChar
  createdAt    DateTime? @default(now()) @db.Timestamp(6)
  updatedAt    DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  users        users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_veterinarians_user")

  @@index([nickname], map: "idx_veterinarians_nickname")
  @@index([userId], map: "idx_veterinarians_userid")
}

model veterinary_students {
  id              String    @id @db.VarChar
  userId          String    @unique @db.VarChar
  realName        String    @db.VarChar
  birthDate       DateTime? @db.Timestamp(6)
  nickname        String?   @db.VarChar(100)
  universityEmail String?   @unique @db.VarChar
  createdAt       DateTime? @default(now()) @db.Timestamp(6)
  updatedAt       DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  users           users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_veterinary_students_user")

  @@index([nickname], map: "idx_veterinary_students_nickname")
  @@index([universityEmail], map: "idx_veterinary_students_university_email")
  @@index([userId], map: "idx_veterinary_students_userid")
}

model hospitals {
  id                    String            @id @db.VarChar
  userId                String            @unique @db.VarChar
  hospitalName          String            @db.VarChar
  representativeName    String            @db.VarChar
  businessNumber        String?           @unique @db.VarChar
  businessLicenseFile   String?           @db.VarChar
  establishedDate       DateTime?         @db.Timestamp(6)
  hospitalAddress       String?           @db.VarChar
  hospitalAddressDetail String?           @db.VarChar
  postalCode            String?           @db.VarChar
  latitude              Decimal?          @db.Decimal(10, 8)
  longitude             Decimal?          @db.Decimal(11, 8)
  hospitalLogo          String?           @db.VarChar
  hospitalWebsite       String?           @db.VarChar
  hospitalDescription   String?
  createdAt             DateTime?         @default(now()) @db.Timestamp(6)
  updatedAt             DateTime?         @default(now()) @updatedAt @db.Timestamp(6)
  hospital_images       hospital_images[]
  users                 users             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_hospitals_user")

  @@index([businessNumber], map: "idx_hospitals_business_number")
  @@index([latitude, longitude], map: "idx_hospitals_location")
  @@index([userId], map: "idx_hospitals_userid")
}

model hospital_images {
  id           String    @id @db.VarChar
  hospitalId   String    @db.VarChar
  userId       String    @db.VarChar
  imageUrl     String    @db.VarChar
  description  String?
  displayOrder Int?      @default(0)
  createdAt    DateTime? @default(now()) @db.Timestamp(6)
  updatedAt    DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  hospital     hospitals @relation(fields: [hospitalId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_hospital_images_hospital")
  users        users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_hospital_images_user")

  @@index([hospitalId], map: "idx_hospital_images_hospital_id")
  @@index([userId], map: "idx_hospital_images_user_id")
}

model veterinarian_profiles {
  id           String    @id
  userId       String    @unique
  nickname     String
  birthDate    DateTime?
  licenseImage String?
  experience   String?
  specialty    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  deletedAt    DateTime?
  users        users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model advertisements {
  id             String                      @id
  title          String
  description    String
  type           AdvertisementType
  imageUrl       String?
  linkUrl        String?
  isActive       Boolean                     @default(true)
  startDate      DateTime
  endDate        DateTime
  targetAudience AdvertisementTargetAudience @default(ALL)
  buttonText     String?
  variant        String?
  viewCount      Int                         @default(0)
  clickCount     Int                         @default(0)
  createdBy      String
  createdAt      DateTime                    @default(now())
  updatedAt      DateTime
  deletedAt      DateTime?
  admin_users    admin_users                 @relation(fields: [createdBy], references: [id])

  @@index([type])
  @@index([isActive])
  @@index([startDate, endDate])
  @@index([createdBy])
}

model admin_users {
  id             String           @id
  email          String           @unique
  passwordHash   String
  name           String
  role           AdminRole        @default(ADMIN)
  isActive       Boolean          @default(true)
  lastLoginAt    DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  advertisements advertisements[]

  @@index([email])
  @@index([isActive])
}

model view_logs {
  id              String   @id
  content_type    String
  content_id      String
  user_id         String?
  user_identifier String
  ip_address      String
  created_at      DateTime @default(now())

  @@index([content_type, content_id])
  @@index([created_at])
  @@index([user_id])
  @@index([user_identifier])
}

model email_verifications {
  id               String    @id
  userId           String?
  email            String
  verificationCode String
  expiresAt        DateTime
  verified         Boolean   @default(false)
  verifiedAt       DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime
  users            users?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([email])
  @@index([verificationCode])
  @@index([expiresAt])
}

model forum_bookmarks {
  id          Int         @id @default(autoincrement())
  user_id     String
  forum_id    String
  created_at  DateTime?   @default(now()) @db.Timestamptz(6)
  deleted_at  DateTime?   @db.Timestamptz(6)
  forum_posts forum_posts @relation(fields: [forum_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users       users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at], map: "idx_forum_bookmarks_created_at")
  @@index([forum_id], map: "idx_forum_bookmarks_forum_id")
  @@index([user_id], map: "idx_forum_bookmarks_user_id")
}

model hospital_equipments {
  id                String    @id
  hospitalProfileId String
  name              String
  category          String
  manufacturer      String?
  model             String?
  purchaseDate      DateTime?
  description       String?
  image             String?
  sortOrder         Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime
}

model hospital_facility_images {
  id           String   @id
  userId       String
  imageUrl     String
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime

  @@index([userId])
}

model hospital_staff {
  id                String   @id
  hospitalProfileId String
  name              String
  position          String
  specialization    String?
  experience        String?
  education         String?
  profileImage      String?
  introduction      String?
  sortOrder         Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime
}

enum AnimalType {
  DOG
  CAT
  EXOTIC
  LARGE_ANIMAL
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  ACCEPTED
  REJECTED
}

enum JobStatus {
  ACTIVE
  CLOSED
  DRAFT
}

enum MessageStatus {
  UNREAD
  READ
}

enum NotificationBatchStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum NotificationPriority {
  HIGH
  NORMAL
  LOW
}

enum NotificationType {
  ANNOUNCEMENT
  INQUIRY
  COMMENT
  REPLY
  APPLICATION_STATUS
  APPLICATION_NEW
}

enum Provider {
  NORMAL
  GOOGLE
  KAKAO
  NAVER
}

enum SalaryType {
  HOURLY
  MONTHLY
  YEARLY
  NEGOTIABLE
}

enum SpecialtyType {
  INTERNAL_MEDICINE
  SURGERY
  DERMATOLOGY
  DENTISTRY
  OPHTHALMOLOGY
  NEUROLOGY
  ORTHOPEDICS
}

enum TransferStatus {
  ACTIVE
  SOLD
  RESERVED
  DISABLED
}

enum UserType {
  VETERINARIAN
  HOSPITAL
  VETERINARY_STUDENT
}

enum AdvertisementType {
  HERO_BANNER
  GENERAL_BANNER
  SIDE_AD
  AD_CARD
  DASHBOARD_BANNER
}

enum AdvertisementStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  SCHEDULED
}

enum AdvertisementTargetAudience {
  ALL
  VETERINARIANS
  HOSPITALS
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}

enum WorkType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}
