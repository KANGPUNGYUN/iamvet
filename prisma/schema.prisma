generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  phone                   String                   @unique
  passwordHash            String?
  profileImage            String?
  userType                UserType
  provider                Provider                 @default(NORMAL)
  isActive                Boolean                  @default(true)
  termsAgreedAt           DateTime
  privacyAgreedAt         DateTime
  marketingAgreedAt       DateTime?
  deletedAt               DateTime?
  withdrawReason          String?
  restoredAt              DateTime?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  realName                String
  birthDate               DateTime?
  businessNumber          String?                  @unique
  establishedDate         DateTime?
  hospitalAddress         String?
  hospitalAddressDetail   String?
  hospitalLogo            String?
  hospitalName            String?
  hospitalWebsite         String?
  licenseImage            String?
  loginId                 String?                  @unique @db.VarChar(100)
  nickname                String?                  @db.VarChar(100)
  seq                     Int                      @unique @default(autoincrement())
  universityEmail         String?                  @unique
  lastLoginAt             DateTime?                @db.Timestamp(6)
  announcementsCreated     Announcement[]
  applications             Application[]
  commentReplies           CommentReply[]
  receivedInquiries        ContactInquiry[]          @relation("InquiryRecipient")
  sentInquiries            ContactInquiry[]          @relation("InquirySender")
  detailedHospitalProfile  DetailedHospitalProfile?
  detailedResume           DetailedResume?
  forum_comments           forum_comments[]
  forumPostLikes           ForumPostLike[]
  forumPosts               ForumPost[]
  hospitalEvaluations      HospitalEvaluation[]      @relation("HospitalEvaluations")
  userHospitalEvaluations  HospitalEvaluation[]      @relation("UserHospitalEvaluations")
  hospital_profiles        hospital_profiles?
  jobLikes                 JobLike[]
  jobs                     Job[]
  lectureComments          LectureComment[]
  lectureLikes             LectureLike[]
  receivedMessages         Message[]                 @relation("ReceivedMessages")
  sentMessages             Message[]                 @relation("SentMessages")
  notificationSettings     NotificationSettings?
  notificationsReceived    Notification[]            @relation("NotificationRecipient")
  notificationsSent        Notification[]            @relation("NotificationSender")
  resumeEvaluations        ResumeEvaluation[]
  resumeLikes              ResumeLike[]
  resumes                  Resume[]
  socialAccounts           SocialAccount[]
  transferLikes            TransferLike[]
  transfers                Transfer[]
  veterinarian_profiles    veterinarian_profiles?
  hospitalAnimals          HospitalAnimal[]
  hospitalSpecialties      HospitalSpecialty[]
  hospitalBusinessLicenses HospitalBusinessLicense[]

  @@index([loginId], map: "idx_users_loginid")
  @@index([nickname], map: "idx_users_nickname")
  @@map("users")
}

model SocialAccount {
  id           String   @id @default(cuid())
  userId       String
  provider     Provider
  providerId   String
  accessToken  String?
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("social_accounts")
}

model Job {
  id                   String            @id @default(cuid())
  hospitalId           String
  title                String
  benefits             String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @default(now()) @updatedAt
  deletedAt            DateTime?
  certifications       String[]          @default([])
  department           String
  education            String[]          @default([])
  experience           String[]          @default([])
  experienceDetails    String[]          @default([])
  isActive             Boolean           @default(true)
  isDraft              Boolean           @default(false)
  isUnlimitedRecruit   Boolean           @default(false)
  isWorkDaysNegotiable Boolean           @default(false)
  isWorkTimeNegotiable Boolean           @default(false)
  major                String[]          @default([])
  managerEmail         String
  managerName          String
  managerPhone         String
  position             String
  preferences          String[]          @default([])
  recruitEndDate       DateTime?
  salary               String
  workDays             String[]          @default([])
  workEndTime          String?
  workStartTime        String?
  salaryType           String
  workType             String[]          @default([])
  viewCount            Int               @default(0)
  inquiries            ContactInquiry[]
  likes                JobLike[]
  jobNotifications     JobNotification[]
  hospital             User              @relation(fields: [hospitalId], references: [id], map: "jobs_hospitalid_fkey")

  @@index([createdAt], map: "idx_jobs_created_at")
  @@index([deletedAt], map: "idx_jobs_deleted_at")
  @@index([hospitalId], map: "idx_jobs_hospital_id")
  @@index([isActive], map: "idx_jobs_is_active")
  @@index([isDraft], map: "idx_jobs_is_draft")
  @@index([createdAt])
  @@index([hospitalId])
  @@index([isActive])
  @@index([isDraft])
  @@map("jobs")
}

model Resume {
  id                String             @id @default(cuid())
  veterinarianId    String
  title             String
  introduction      String?
  experience        String?
  education         String?
  certifications    String?
  skills            String?
  preferredSalary   Int?
  preferredLocation String?
  availableFrom     DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  inquiries         ContactInquiry[]
  evaluations       ResumeEvaluation[]
  veterinarian      User               @relation(fields: [veterinarianId], references: [id])

  @@map("resumes")
}

model Application {
  id               String            @id @default(cuid())
  jobId            String
  veterinarianId   String
  coverLetter      String?
  status           ApplicationStatus @default(PENDING)
  appliedAt        DateTime          @default(now())
  reviewedAt       DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  veterinarian     User              @relation(fields: [veterinarianId], references: [id])
  jobNotifications JobNotification[]

  @@unique([jobId, veterinarianId])
  @@index([jobId], map: "idx_applications_job_id")
  @@index([status], map: "idx_applications_status")
  @@index([veterinarianId], map: "idx_applications_veterinarian_id")
  @@map("applications")
}

model Lecture {
  id          String            @id @default(cuid())
  title       String
  description String?
  videoUrl    String
  thumbnail   String?
  duration    Int?
  category    String?
  tags        String[]
  viewCount   Int               @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  deletedAt   DateTime?
  comments    LectureComment[]
  likes       LectureLike[]

  @@map("lectures")
}

model LectureComment {
  id                     String           @id @default(cuid())
  lectureId              String
  userId                 String
  content                String
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  deletedAt              DateTime?
  parentId               String?          @db.VarChar(255)
  replies                CommentReply[]
  lecture_comments       LectureComment?  @relation("lecture_commentsTolecture_comments", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_lecture_comment_parent")
  other_lecture_comments LectureComment[] @relation("lecture_commentsTolecture_comments")
  lecture                Lecture          @relation(fields: [lectureId], references: [id])
  user                   User             @relation(fields: [userId], references: [id])

  @@index([lectureId], map: "idx_lecture_comments_lecture_id")
  @@index([parentId], map: "idx_lecture_comments_parent_id")
  @@map("lecture_comments")
}

model CommentReply {
  id        String         @id @default(cuid())
  commentId String
  userId    String
  content   String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  deletedAt DateTime?
  comment   LectureComment @relation(fields: [commentId], references: [id])
  user      User           @relation(fields: [userId], references: [id])

  @@map("comment_replies")
}

model Transfer {
  id            String             @id @default(cuid())
  userId        String
  title         String
  description   String
  location      String
  price         Int?
  category      String
  images        String[]
  status        TransferStatus     @default(ACTIVE)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  deletedAt     DateTime?
  area          Int?
  baseAddress   String?            @map("base_address")
  detailAddress String?            @map("detail_address")
  latitude      Float?
  longitude     Float?
  sido          String?
  sigungu       String?
  views         Int                @default(0)
  likes         TransferLike[]
  user          User               @relation(fields: [userId], references: [id])

  @@map("transfers")
}

model ForumPost {
  id             String           @id @default(cuid())
  userId         String
  title          String
  content        String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  animalType     String
  medicalField   String
  viewCount      Int              @default(0)
  forum_comments forum_comments[]
  likes          ForumPostLike[]
  user           User             @relation(fields: [userId], references: [id])

  @@map("forum_posts")
}

model Message {
  id         String        @id @default(cuid())
  senderId   String
  receiverId String
  subject    String?
  content    String
  status     MessageStatus @default(UNREAD)
  readAt     DateTime?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  receiver   User          @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User          @relation("SentMessages", fields: [senderId], references: [id])

  @@map("messages")
}


model HospitalEvaluation {
  id         String    @id @default(cuid())
  hospitalId String
  userId     String
  rating     Int
  comment    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  hospital   User      @relation("HospitalEvaluations", fields: [hospitalId], references: [id])
  user       User      @relation("UserHospitalEvaluations", fields: [userId], references: [id])

  @@unique([hospitalId, userId])
  @@map("hospital_evaluations")
}

model ResumeEvaluation {
  id        String    @id @default(cuid())
  resumeId  String
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  resume    Resume    @relation(fields: [resumeId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([resumeId, userId])
  @@map("resume_evaluations")
}

model DetailedResume {
  id                  String                    @id @default(cuid())
  userId              String                    @unique
  photo               String?
  name                String
  birthDate           String?
  introduction        String?
  phone               String?
  email               String?
  phonePublic         Boolean                   @default(false)
  emailPublic         Boolean                   @default(false)
  position            String?
  specialties         String[]
  preferredRegions    String[]
  expectedSalary      String?
  workTypes           String[]
  startDate           String?
  preferredWeekdays   String[]
  weekdaysNegotiable  Boolean                   @default(false)
  workStartTime       String?
  workEndTime         String?
  workTimeNegotiable  Boolean                   @default(false)
  selfIntroduction    String?
  viewCount           Int                       @default(0)
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  deletedAt           DateTime?
  user                User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  educations          ResumeEducation[]
  experiences         ResumeExperience[]
  licenses            ResumeLicense[]
  medicalCapabilities ResumeMedicalCapability[]
  likes               ResumeLike[]

  @@map("detailed_resumes")
}

model ResumeExperience {
  id           String         @id @default(cuid())
  resumeId     String
  hospitalName String
  mainTasks    String
  startDate    DateTime?
  endDate      DateTime?
  sortOrder    Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  resume       DetailedResume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("resume_experiences")
}

model ResumeLicense {
  id           String         @id @default(cuid())
  resumeId     String
  name         String
  issuer       String
  grade        String?
  acquiredDate DateTime?
  sortOrder    Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  resume       DetailedResume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("resume_licenses")
}

model ResumeEducation {
  id               String         @id @default(cuid())
  resumeId         String
  degree           String
  graduationStatus String
  schoolName       String
  major            String
  gpa              String?
  totalGpa         String?
  startDate        DateTime?
  endDate          DateTime?
  sortOrder        Int            @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  resume           DetailedResume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("resume_educations")
}

model ResumeMedicalCapability {
  id          String         @id @default(cuid())
  resumeId    String
  field       String
  proficiency String
  description String?
  others      String?
  sortOrder   Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  resume      DetailedResume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("resume_medical_capabilities")
}

model DetailedHospitalProfile {
  id                  String              @id @default(cuid())
  userId              String              @unique
  hospitalName        String
  businessNumber      String
  address             String
  phone               String
  website             String?
  description         String?
  businessLicense     String?
  hospitalLogo        String?
  establishedDate     String?
  detailAddress       String?
  email               String?
  treatmentAnimals    String[]
  treatmentFields     String[]
  operatingHours      Json?
  emergencyService    Boolean             @default(false)
  parkingAvailable    Boolean             @default(false)
  publicTransportInfo String?
  totalBeds           Int?
  surgeryRooms        Int?
  xrayRoom            Boolean             @default(false)
  ctScan              Boolean             @default(false)
  ultrasound          Boolean             @default(false)
  grooming            Boolean             @default(false)
  boarding            Boolean             @default(false)
  petTaxi             Boolean             @default(false)
  certifications      String[]
  awards              String[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  deletedAt           DateTime?
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  equipments          HospitalEquipment[]
  staff               HospitalStaff[]
  facilityImages      HospitalFacilityImage[]

  @@map("detailed_hospital_profiles")
}

model HospitalStaff {
  id                String                  @id @default(cuid())
  hospitalProfileId String
  name              String
  position          String
  specialization    String?
  experience        String?
  education         String?
  profileImage      String?
  introduction      String?
  sortOrder         Int                     @default(0)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  hospitalProfile   DetailedHospitalProfile @relation(fields: [hospitalProfileId], references: [id], onDelete: Cascade)

  @@map("hospital_staff")
}

model HospitalEquipment {
  id                String                  @id @default(cuid())
  hospitalProfileId String
  name              String
  category          String
  manufacturer      String?
  model             String?
  purchaseDate      DateTime?
  description       String?
  image             String?
  sortOrder         Int                     @default(0)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  hospitalProfile   DetailedHospitalProfile @relation(fields: [hospitalProfileId], references: [id], onDelete: Cascade)

  @@map("hospital_equipments")
}

model HospitalFacilityImage {
  id                String                  @id @default(cuid())
  userId            String
  imageUrl          String
  displayOrder      Int                     @default(0)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  hospitalProfile   DetailedHospitalProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
  @@map("hospital_facility_images")
}

model HospitalAnimal {
  id          String   @id @default(cuid())
  userId      String
  animalType  String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("hospital_animals")
}

model HospitalSpecialty {
  id        String   @id @default(cuid())
  userId    String
  specialty String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("hospital_specialties")
}

model HospitalBusinessLicense {
  id         String   @id @default(cuid())
  userId     String
  fileName   String
  fileUrl    String
  fileType   String
  uploadedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("hospital_business_licenses")
}

model hospital_profiles {
  id              String    @id
  userId          String    @unique
  hospitalName    String
  businessNumber  String    @unique
  address         String
  phone           String
  website         String?
  description     String?
  businessLicense String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  deletedAt       DateTime?
  users           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model veterinarian_profiles {
  id           String    @id
  userId       String    @unique
  nickname     String
  birthDate    DateTime?
  licenseImage String?
  experience   String?
  specialty    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  deletedAt    DateTime?
  users        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model migration_log {
  id             Int       @id @default(autoincrement())
  migration_name String    @unique @db.VarChar(255)
  executed_at    DateTime? @default(now()) @db.Timestamp(6)
  description    String?
}

model forum_comments {
  id                   String           @id @db.VarChar(255)
  forum_id             String           @db.VarChar(255)
  user_id              String           @db.VarChar(255)
  parent_id            String?          @db.VarChar(255)
  content              String
  createdAt            DateTime?        @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime?        @default(now()) @db.Timestamptz(6)
  deletedAt            DateTime?        @db.Timestamptz(6)
  forum_posts          ForumPost        @relation(fields: [forum_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  forum_comments       forum_comments?  @relation("forum_commentsToforum_comments", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  other_forum_comments forum_comments[] @relation("forum_commentsToforum_comments")
  users                User             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([createdAt], map: "idx_forum_comments_created_at")
  @@index([forum_id], map: "idx_forum_comments_forum_id")
  @@index([parent_id], map: "idx_forum_comments_parent_id")
  @@index([user_id], map: "idx_forum_comments_user_id")
}

model Notification {
  id                  String               @id @default(cuid())
  type                NotificationType
  recipientId         String
  recipientType       UserType
  senderId            String?
  title               String
  content             String
  isRead              Boolean              @default(false)
  readAt              DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  announcement        Announcement?
  commentNotification CommentNotification?
  inquiry             Inquiry?
  jobNotification     JobNotification?
  recipient           User                 @relation("NotificationRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  sender              User?                @relation("NotificationSender", fields: [senderId], references: [id])

  @@index([recipientId, isRead, createdAt(sort: Desc)])
  @@index([type, createdAt(sort: Desc)])
  @@map("notifications")
}

model Announcement {
  id              String               @id @default(cuid())
  notificationId  String               @unique
  targetUserTypes String[]
  priority        NotificationPriority @default(NORMAL)
  expiresAt       DateTime?
  createdBy       String
  creator         User                 @relation(fields: [createdBy], references: [id])
  notification    Notification         @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  batches         NotificationBatch[]

  @@map("announcements")
}

model Inquiry {
  id             String       @id @default(cuid())
  notificationId String       @unique
  inquiryType    String
  subject        String
  attachments    String[]
  repliedAt      DateTime?
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@map("inquiries")
}

model CommentNotification {
  id              String       @id @default(cuid())
  notificationId  String       @unique
  postType        String
  postId          String
  commentId       String
  parentCommentId String?
  notification    Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@index([postType, postId])
  @@map("comment_notifications")
}

model JobNotification {
  id             String            @id @default(cuid())
  notificationId String            @unique
  jobId          String
  applicationId  String
  previousStatus String?
  newStatus      ApplicationStatus
  application    Application       @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  job            Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  notification   Notification      @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@index([jobId, applicationId])
  @@map("job_notifications")
}

model NotificationSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  announcementEnabled Boolean  @default(true)
  inquiryEnabled      Boolean  @default(true)
  commentEnabled      Boolean  @default(true)
  jobEnabled          Boolean  @default(true)
  emailNotifications  Boolean  @default(false)
  pushNotifications   Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

model NotificationBatch {
  id              String                  @id @default(cuid())
  announcementId  String
  totalRecipients Int
  sentCount       Int                     @default(0)
  failedCount     Int                     @default(0)
  status          NotificationBatchStatus @default(PENDING)
  startedAt       DateTime?
  completedAt     DateTime?
  createdAt       DateTime                @default(now())
  announcement    Announcement            @relation(fields: [announcementId], references: [id])

  @@map("notification_batches")
}

model ResumeLike {
  id        String         @id @default(cuid())
  userId    String
  resumeId  String
  createdAt DateTime       @default(now())
  resume    DetailedResume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, resumeId])
  @@index([resumeId])
  @@index([userId])
  @@map("resume_likes")
}

model JobLike {
  id        String   @id @default(cuid())
  userId    String
  jobId     String
  createdAt DateTime @default(now())
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
  @@index([jobId])
  @@index([userId])
  @@map("job_likes")
}

model LectureLike {
  id        String   @id @default(cuid())
  userId    String
  lectureId String
  createdAt DateTime @default(now())
  lecture   Lecture  @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lectureId])
  @@index([lectureId])
  @@index([userId])
  @@map("lecture_likes")
}

model TransferLike {
  id         String   @id @default(cuid())
  userId     String
  transferId String
  createdAt  DateTime @default(now())
  transfer   Transfer @relation(fields: [transferId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, transferId])
  @@index([transferId])
  @@index([userId])
  @@map("transfer_likes")
}

model ForumPostLike {
  id          String    @id @default(cuid())
  userId      String
  forumPostId String
  createdAt   DateTime  @default(now())
  forumPost   ForumPost @relation(fields: [forumPostId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, forumPostId])
  @@index([forumPostId])
  @@index([userId])
  @@map("forum_post_likes")
}

enum UserType {
  VETERINARIAN
  HOSPITAL
  VETERINARY_STUDENT
}

enum AnimalType {
  DOG
  CAT
  EXOTIC
  LARGE_ANIMAL
}

enum SpecialtyType {
  INTERNAL_MEDICINE
  SURGERY
  DERMATOLOGY
  DENTISTRY
  OPHTHALMOLOGY
  NEUROLOGY
  ORTHOPEDICS
}

enum Provider {
  NORMAL
  GOOGLE
  KAKAO
  NAVER
}

enum JobStatus {
  ACTIVE
  CLOSED
  DRAFT
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  ACCEPTED
  REJECTED
}

enum SalaryType {
  HOURLY
  MONTHLY
  YEARLY
  NEGOTIABLE
}

enum WorkType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum TransferStatus {
  ACTIVE
  SOLD
  RESERVED
  DISABLED
}

enum MessageStatus {
  UNREAD
  READ
}

enum NotificationType {
  ANNOUNCEMENT
  INQUIRY
  COMMENT
  REPLY
  APPLICATION_STATUS
  APPLICATION_NEW
}

enum NotificationPriority {
  HIGH
  NORMAL
  LOW
}

enum NotificationBatchStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model ContactInquiry {
  id          String   @id @default(cuid())
  senderId    String   @map("sender_id")
  recipientId String   @map("recipient_id")
  jobId       String?  @map("job_id")
  resumeId    String?  @map("resume_id")
  subject     String
  message     String
  type        String   @default("general")
  isRead      Boolean  @default(false) @map("is_read")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  job         Job?     @relation(fields: [jobId], references: [id])
  recipient   User     @relation("InquiryRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  resume      Resume?  @relation(fields: [resumeId], references: [id])
  sender      User     @relation("InquirySender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([recipientId])
  @@index([jobId])
  @@index([resumeId])
  @@index([createdAt])
  @@index([isRead])
  @@map("contact_inquiries")
}

model ViewLog {
  id             String   @id @default(cuid())
  contentType    String   @map("content_type")
  contentId      String   @map("content_id")
  userId         String?  @map("user_id")
  userIdentifier String   @map("user_identifier")
  ipAddress      String   @map("ip_address")
  createdAt      DateTime @default(now()) @map("created_at")

  @@index([contentType, contentId])
  @@index([userId])
  @@index([userIdentifier])
  @@index([createdAt])
  @@map("view_logs")
}
